<!DOCTYPE html>
[% USE To %]

<html lang="en">
<head>
  <!-- Required meta tags -->
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
  <meta http-equiv="content-type" content="text/html; charset=UTF-8" />

  <link rel="icon" type="image/x-icon" href="[% PLUGIN_PATH %]/favicon.ico">

  <title>Koha-Suomi - OKM-raportointityökalu</title>

  <!-- Load required Bootstrap and BootstrapVue CSS -->
  <link type="text/css" rel="stylesheet" href="[% PLUGIN_PATH %]/custom.css" />
  <link type="text/css" rel="stylesheet" href="[% PLUGIN_PATH %]/includes/bootstrap.min.css" />
  <link type="text/css" rel="stylesheet" href="[% PLUGIN_PATH %]/includes/bootstrap-vue.css" />

  <!-- Load Vue followed by BootstrapVue -->
  <script src="[% PLUGIN_PATH %]/includes/vue.min.js"></script>
  <script src="[% PLUGIN_PATH %]/includes/bootstrap-vue.js"></script>

  <!-- Load the following for BootstrapVueIcons support -->
  <script src="[% PLUGIN_PATH %]/includes/bootstrap-vue-icons.min.js"></script>

  <script src="[% PLUGIN_PATH %]/includes/axios.min.js"></script>
  <script src="[% PLUGIN_PATH %]/includes/jquery-3.6.0.min.js"></script>
  <script src="[% PLUGIN_PATH %]/includes/jquery.table2excel.min.js"></script>


</head>

<div id="app" class="container-fluid">
<!-- Breadcrumb -->
        <nav aria-label="breadcrumb" class="main-breadcrumb">
            <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/cgi-bin/koha/mainpage.pl">Etusivu</a></li>
            <li class="breadcrumb-item"><a href="/cgi-bin/koha/plugins/plugins-home.pl">Liitännäiset</a></li>
            <li class="breadcrumb-item active" aria-current="page">OKM-raportointityökalu</li>
            </ol>
        </nav>
        <!-- /Breadcrumb -->

  <div>
    <div>
      <b-button v-b-toggle.collapse-1 variant="primary" @click="getOKMlisting"> Näytä/Piilota raporttilistaus
      </b-button>
      <b-row>

      </b-row>
      <b-collapse id="collapse-1" class="mt-2">
        <b-card>
          <p class="card-text">Valitse näytettävä raportti klikkaamalla riviä. Luotu-sarake ei ole suodatettavissa.</p>
          <div>
            <b-form-input v-model="okmListFilter" placeholder="Suodata"></b-form-input>
            <div class="mt-2">Suodatettu: {{ okmListFilter }}</div>
          </div id="datatableokm">
          <!--- #The row-clicked event will pass 3 parameters to your function. The first being the item specific to the row that was clicked. The second will be the index of the row, and the third is a native click event.
          This means you can use the arguments keyword to get the index and pass it to your function. -->
          <b-table class="w-75" id="bsvue-datatable-okmlist" striped bordered sticky-column :filter-ignored-fields="['4']" :sort-by="2" :sort-desc="true" sticky-header="340px" hover selectable :filter="okmListFilter" :select-mode="okmSelectMode" :busy="isBusy"
          :fields="okmreportlistfields" :items="okmlisting" :sort-compare="dateCompare" @row-clicked="fetchOkm(arguments[0])">
          <div slot="table-busy" class="text-center text-danger my-2">
            <b-spinner class="align-middle"></b-spinner>
            <strong>Loading...</strong>
          </div>
            </template>
        </b-card>
      </b-collapse>
    </div>
    <div>
      <br>
      <b-col lg="4" class="pb-2">
      </b-col>
    </div>

    <b-card>
    <div>
      <b-input-group lg="2">
        <b-button type="button" :pressed.sync="hideOkmCollectionHoldingBranch" @click="toggleOkmFields" :variant="[hideOkmCollectionHoldingBranch ? 'dark' : 'primary']">{{hideOkmCollectionHoldingBranch ? 'Näytä kokoelmat' : 'Piilota kokoelmat'}}
          (sijaintikirj.)</b-button>
        <b-button type="button" :pressed.sync="hideOkmCollectionHomeBranch" @click="toggleOkmFields" :variant="[hideOkmCollectionHomeBranch ? 'dark' : 'primary']">{{hideOkmCollectionHomeBranch ? 'Näytä kokoelmat' : 'Piilota kokoelmat'}}
            (koti)</b-button>
        <b-button type="button" :pressed.sync="hideOkmAcquisitions" @click="toggleOkmFields" :variant="[hideOkmAcquisitions ? 'dark' : 'primary']">{{hideOkmAcquisitions ? 'Näytä hankinnat' : 'Piilota hankinnat'}}</b-button>
        <b-button type="button" :pressed.sync="hideOkmAcquisitionsExpenditures" @click="toggleOkmFields" :variant="[hideOkmAcquisitionsExpenditures ? 'dark' : 'primary']">{{hideOkmAcquisitionsExpenditures ? 'Näytä hankintakulut' : 'Piilota hankintakulut'}}</b-button>
        <b-button type="button" :pressed.sync="hideOkmIssues" @click="toggleOkmFields" :variant="[hideOkmIssues ? 'dark' : 'primary']">{{hideOkmIssues ? 'Näytä lainaus' : 'Piilota lainaus'}}</b-button>
        <b-button type="button" :pressed.sync="hideOkmInterlibraryLoans" @click="toggleOkmFields" :variant="[hideOkmInterlibraryLoans ? 'dark' : 'primary']">{{hideOkmInterlibraryLoans ? 'Näytä kaukolainaus' : 'Piilota kaukolainaus'}}</b-button>
        <b-button type="button" :pressed.sync="hideOkmDeleted" @click="toggleOkmFields" :variant="[hideOkmDeleted ? 'dark' : 'primary']">{{hideOkmDeleted ? 'Näytä poistot' : 'Piilota poistot'}}</b-button>
        <b-button type="button" :pressed.sync="hideOkmActiveBorrowers" @click="toggleOkmFields" :variant="[hideOkmActiveBorrowers ? 'dark' : 'primary']">{{hideOkmActiveBorrowers ? 'Näytä akt.asiakkaat' : 'Piilota akt.asiakkaat'}}</b-button>
        <b-button type="button" :pressed.sync="hideOkmCeliaBorrowers" @click="toggleOkmFields" :variant="[hideOkmCeliaBorrowers ? 'dark' : 'primary']">{{hideOkmCeliaBorrowers ? 'Näytä Celia-lainaajat' : 'Piilota Celia-lainaajat'}}</b-button>
      </b-input-group>

      <!-- <b-row>
        <p>Pressed State: <strong>{{ hideOkmCollectionHoldingBranch }}</strong> Pressed State: <strong>{{
            hideOkmCollectionHomeBranch }}</strong>Pressed State: <strong>{{ hideOkmAcquisitions }}</strong>
          Pressed State: <strong>{{ hideOkmIssues }}</strong></
      </b-row> -->

        <b-col lg="6" class="my-1">
            <b-input-group size="sm">
              <div>
              </div

              <b-input-group-append>
                <!--<b-button :disabled="!filter" @click="filter = ''">Clear</b-button> -->
              </b-input-group-append>
            </b-input-group>
          </b-form-group>
        </b-col>
      </div>

      <b-row>
        <b-col lg="8" class="my-1">
          <b-row>
            <div>
              <b-input-group>
              <div class="w-25">
                <b-form-input id="filter-input" v-model="filter" v-b-popover.hover.bottom="'Käytä pilkkua erottimena jos haluat suodattaa useammalla merkkijonolla esim. joe,val. Kirjainkoolla ei ole merkitystä. Yksittäisen rivin voi poistaa kirjastotunnuksen edessä olevalla napilla. Lataa raportti uudelleen palauttaaksesi poistetut rivit.'"
                type="search" placeholder="Suodata"></b-form-input>
              </div>
                <b-button :disabled="!filter" @click="filter = null" lg="4">Tyhjennä suodatin</b-button>
                <b-button @click="sortBy = null" lg="4">Tyhjennä järjestys</b-button>
                <b-button id="button1" v-b-popover.hover.top="
                            'Nähtävissä oleva data päätyy leikepöydälle. Käytä suodatusta tarvittaessa.'"
                  onclick="CopyToClipboard('datatable')">Kopioi leikepöydälle</b-button>
                <b-button type="button" class="btn btn-success" id="table-export" @click="exportXls" v-b-popover.hover.top="
                            'Nähtävissä oleva data päätyy tiedostoon. Käytä suodatusta tarvittaessa.'" variant="primary">Vie XLS
                </b-button>
              </b-input-group>
            </div>
          </b-row>
          <b-row align-v="end">
            <div>
              Lajiteltu: <b>{{ sortBy }}</b>, Sort Direction:
              <b>{{ sortDesc ? "Descending" : "Ascending" }}</b>
              <div class="mt-2">Suodatettu: {{ filter }}</div>
            </div>
          </b-row>
          </b-card>
        </b-col>
      </b-row>

    <b-row align-v="end">
    </b-row>
  </div>

<!-- BS-VUE DATATABLE -->
  <div id="datatable" ref="scrollhere">
    <!-- sido tablen näyttämä data muuttujaan v-model: filtered, kutsu metodissa this.filtered -->
    <!-- sticky-header pitää rivien otsikot paikallaan, mutta ei ole kovin käytettävä. -->
    <b-table v-model="filtered" id="bsvue-datatable" sticky-header="500px" striped hover responsive="sm"
      selectable bordered outlined small sort-icon-left no-border-collapse :sort-by.sync="sortBy"
      :filter-included-fields="filterOn" :sort-desc.sync="sortDesc" :items="myJson.data" :fields="fields" :busy="isBusy"
      :filter="filter" label-sort-asc="" label-sort-desc="" label-sort-clear="" :filter-function="filterFn">

      <template v-slot:cell(library)="data">
        <b-button size="sm" margin-right=10px @click="deleteItem(data.item.library)"></b-button>
        {{data.item.library}}
      </template>

      <template #cell(0)="data">
        <span v-html="data.value"></span>
      </template>

      <div slot="table-busy" class="text-center text-danger my-2">
        <b-spinner class="align-middle"></b-spinner>
        <strong>Loading...</strong>
      </div>
  </div>
</div>

</b-row>

<b-row align-v="end">


  <!-- Start running your app -->

  <script>

    window.app = new Vue({
      el: '#app',
      data: {
        branchcodes: null,
        branchcodelist: [],
        sortBy: "library",
        sortDesc: false,
        selected: null,
        lowDateFormatted: '',
        selected2: null,
        maxDateFormatted: '',
        context: null,
        selectedMonth: null,
        selectedBranch: null,
        zipCode: '',
        filtered: null,
        selectedMonth: null,
        lowDate: "",
        maxDate: "",
        filter: "",
        okmListFilter: "",
        filterOn: [],
        isBusy: false,
        getIssuesByZipButtonDisabled: false,
        getIssuesByZipButtonText: 'Hae tiedot',
        fields: null,
        myJson: [], //oletusdata
        lainpalselected: null,
        okmlisting: null,
        okmreportlistfields: null,
        okmViewCollectionHomebranch: true,
        okmSelectMode: 'single',
        hideOkmCollectionHoldingBranch: false,
        hideOkmCollectionHomeBranch: false,
        hideOkmAcquisitions: false,
        hideOkmAcquisitionsExpenditures: false,
        hideOkmIssues: false,
        hideOkmInterlibraryLoans: false,
        hideOkmDeleted: false,
        hideOkmActiveBorrowers: false,
        hideOkmCeliaBorrowers: false,

        options: [
          { value: null, text: 'Please select an option' },
          { value: 'Lainaus', text: 'Lainaus' },
          { value: 'Palautus', text: 'Palautus' },
          { value: { C: '3PO' }, text: 'This is an option with object value' },
          { value: 'd', text: 'This one is disabled', disabled: true }
        ],
        monthOptions: [
          { value: null, text: 'Valitse' },
          { value: '01', text: 'Tammikuu' },
          { value: '02', text: 'Helmikuu' },
          { value: '03', text: 'Maaliskuu' },
          { value: '04', text: 'Huhtikuu' },
          { value: '05', text: 'Toukokuu' },
          { value: '06', text: 'Kesäkuu' },
          { value: '07', text: 'Heinäkuu' },
          { value: '08', text: 'Elokuu' },
          { value: '09', text: 'Syyskuu' },
          { value: '10', text: 'Lokakuu' },
          { value: '11', text: 'Marraskuu' },
          { value: '12', text: 'Joulukuu' },
        ]

      },
      computed: {
        zipState() {
          var testzip = this.zipCode;
          return this.zipCode.length == 5 ? true : false
        },
        sortOptions() {
          // Create an options list from our fields
          return this.fields
            .filter((f) => f.sortable)
            .map((f) => {
              return { text: f.label, value: f.key };
            });
        },
        btnStates() {
          return this.buttons.map(btn => btn.state)
        }
      },
      mounted: function () {
        // `this` points to the vm instance
        let branchcodes = ([% To.json(branches) %]);
        //let branchcodes = [];

        //console.log("branches is: ");
        //console.log(branchcodes);

        this.branchcodelist = branchcodes;
      },
      // define methods under the `methods` object
      methods: {
        //https://gist.github.com/TheDiligentDev/a2a2a256dee23818ef2bd7ffa9a896b1
        deleteItem(library) {
          //console.log("deleteItem:");
          //console.log(library);
          //console.log(this.myJson.data);

          var arr = [...this.myJson.data];
          var toDelete = library;
          //console.log("todelete:");
          //console.log(toDelete);
          //var index = arr.indexOf(toDelete);
          //var index = arr.findIndex( s => s.value == 'SII_VU' );
          //var index = arr.findIndex(o=>o.value === library);

          var index = findIndexByProperty(arr,"library",library);

          //console.log("index: ");
          //console.log(index);

          if (index > -1) {
            arr.splice(index, 1);
          }

          //console.log("after");
          //console.log(arr);

          this.myJson.data = arr;
          this.sortBy = "collection_by_holdingbranch.total";
          this.sortBy = "library";
          //console.log(index);
          //if (index !== -1) {
          //  this.myJson.data.splice(index, 1);
          //}
        },
        //for comma separated filtering
        normalizeString(s) {
          return `${s}`.trim().toLowerCase();
        },
        //comma separated filering
        filterFn(row) {
          return this.filter.split(',')
            .map(this.normalizeString)
            .some(
              term => Object.values(row)
                .map(this.normalizeString)
                .some(
                  val => val.indexOf(term) > -1
                )
            );
        },
        toggleBusy() {
          this.isBusy = !this.isBusy;
        },
        //for euro date sorting
        dateCompare(itemA, itemB, key) {
          if (key !== '2' && key !=='3') {
            // If field is not `date` we let b-table handle the sorting
            return false
          } else {
            // Convert the string formatted date to a number that can be compared
            // Get the values being compared from the items
            let a = itemA[key]
            let b = itemB[key]
            // Split them into an array of parts (dd, mm, and yyyy)
            a = a.split('.')
            b = b.split('.')
            // convert string parts to numbers
            a = (parseInt(a[2], 10) * 10000) + (parseInt(a[1], 10) * 100) + parseInt(a[0])
            b = (parseInt(b[2], 10) * 10000) + (parseInt(b[1], 10) * 100) + parseInt(b[0])
            // Return the comparison result
            return a - b
          }
        },
        toggleOkmFields() {
          //console.log("Toggled okmfields");
          // If we want to copy a primitive value, we can use assignment operator (=), but for objects we cannot use the assignment operator.  
          var okmfieldsfiltered = [...okmfields];

          if (this.hideOkmCollectionHoldingBranch === true) {
            for (let i = 1; i < 17; i++) {
              delete okmfieldsfiltered[i];

            }
          }
          if (this.hideOkmCollectionHomeBranch === true) {
            for (let i = 17; i < 33; i++) {
              delete okmfieldsfiltered[i];
            }
          }
          if (this.hideOkmAcquisitions === true) {
            for (let i = 33; i < 49; i++) {
              delete okmfieldsfiltered[i];
            }
          }
          if (this.hideOkmAcquisitionsExpenditures === true) {
            for (let i = 49; i < 51; i++) {
              delete okmfieldsfiltered[i];
            }
          }
          if (this.hideOkmIssues === true) {
            for (let i = 51; i < 68; i++) {
              delete okmfieldsfiltered[i];
            }
          }
          if (this.hideOkmInterlibraryLoans === true) {
            for (let i = 68; i < 85; i++) {
              delete okmfieldsfiltered[i];
            }
          }
          if (this.hideOkmDeleted === true) {
              delete okmfieldsfiltered[85];
          }
          if (this.hideOkmActiveBorrowers === true) {
              delete okmfieldsfiltered[86];
          }
          if (this.hideOkmCeliaBorrowers === true) {
              delete okmfieldsfiltered[87];
          }

          this.fields = okmfieldsfiltered;
        },
        onContext(ctx) {
          // Päivämäärälle: The date formatted in the locale, or the `label-no-date-selected` string
          this.formatted = ctx.selectedFormatted
          // The following will be an empty string until a valid date is entered
          this.selected = ctx.selectedYMD
        },
        // modify data on the fly, first element of data array
        //linkify(value, key, item) {
        //  let toadd = "cat";
        //  let modded = item[0];
        //  modded = modded.concat(toadd);
        //  return modded;
        //},
        clearTable() {
          this.fields = null;
          this.myJson.data = null;
        },
        //table2excel export bootstrap table
        exportXls() {
          //console.log("export");
            var table = $("#bsvue-datatable");
            if (table && table.length) {
              $(table).table2excel({
                exclude: ".noExl",
                name: "Excel Document Name",
                filename: "OKM_" + new Date().toLocaleDateString("en-UK").replace(/\//g, '-') + ".xls",
                fileext: ".xls",
                exclude_img: true,
                exclude_links: true,
                exclude_inputs: true,
                preserveColors: true
              });
            }
        },
        async getIssuesByZip() {
          this.myJson.data = null;
          this.fields = null;

          this.isBusy = true;
          try {
            //prevent spamming heavy queries, maybe use a global 'Hae' button?
            this.getIssuesByZipButtonDisabled = true;
            this.getIssuesByZipButtonText = 'Hakee...';
            const response = await axios.get(
              `/api/v1/contrib/kohasuomi/reportstool/issues/issuesbyzip/`, { params: { lowdate: this.lowDate, maxdate: this.maxDate } }
            );
            this.getIssuesByZipButtonDisabled = false;
            this.getIssuesByZipButtonText = 'Hae tiedot';

            this.fields = borrower_issuesbyzip_fields;
            this.myJson.data = response.data;

            this.isBusy = false;

          } catch (e) {
            //console.log(e);
            this.isBusy = false;
            this.getIssuesByZipButtonDisabled = false;
            this.getIssuesByZipButtonText = 'Hae tiedot';
          }
        },
        async getIssuesByPatronZip() {
          this.myJson.data = null;
          this.fields = null;
          this.isBusy = true;
          try {
            //prevent spamming heavy queries, maybe use a global 'Hae' button?
            this.getIssuesByZipButtonDisabled = true;
            this.getIssuesByZipButtonText = 'Hakee...';
            const response = await axios.get(
              `/api/v1/contrib/kohasuomi/reportstool/issues/issuesbypatronzip/`, { params: { zipcode: this.zipCode, lowdate: this.lowDate, maxdate: this.maxDate } }
            );
            this.getIssuesByZipButtonDisabled = false;
            this.getIssuesByZipButtonText = 'Hae';

            this.fields = borrower_issuesbypatronzip_fields;
            this.myJson.data = response.data;

            this.isBusy = false;

          } catch (e) {
            //console.log(e);
            this.isBusy = false;
            this.getIssuesByZipButtonDisabled = false;
            this.getIssuesByZipButtonText = 'Hae';
          }
        },
        async getOKMlisting(){
          try {
            const response = await axios.get(
              `/api/v1/contrib/kohasuomi/reportstool/okmstats/reports/`
            );

            this.okmlisting = response.data;
            this.okmreportlistfields = okmreportlistfields;
            //console.log(response.data);

          } catch (e) {
            //console.log(e);
            this.isBusy = false;
          }
        },
        async getRemoveToolData() {
          this.myJson.data = null;
          this.fields = null;
          this.isBusy = true;

          try {
            const response = await axios.get(
              `/api/v1/contrib/kohasuomi/reportstool/removetool/` , { params: { branch: this.selectedBranch } }
            );

            this.fields = removetoolfields;
            this.myJson.data = response.data;
            this.isBusy = !this.isBusy;
            this.sortBy = null;

          } catch (e) {
            //console.log(e);
            this.isBusy = false;
          }
        },
        async fetchOkm(item) {
          //console.log("fetchOkm started");
          let reportid = item[0];

          this.myJson.data = null;
          this.fields = null;
          this.isBusy = true;

          // If we want to copy a primitive value, we can use assignment operator (=), but for objects we cannot use the assignment operator.  
          var okmfieldsfiltered = [...okmfields];

          if (this.hideOkmCollectionHoldingBranch === true) {
            for (let i = 1; i < 17; i++) {
              delete okmfieldsfiltered[i];

            }
          }
          if (this.hideOkmCollectionHomeBranch === true) {
            for (let i = 17; i < 33; i++) {
              delete okmfieldsfiltered[i];
            }
          }
          if (this.hideOkmAcquisitions === true) {
            for (let i = 33; i < 49; i++) {
              delete okmfieldsfiltered[i];
            }
          }
          if (this.hideOkmAcquisitionsExpenditures === true) {
            for (let i = 49; i < 51; i++) {
              delete okmfieldsfiltered[i];
            }
          }
          if (this.hideOkmIssues === true) {
            for (let i = 51; i < 68; i++) {
              delete okmfieldsfiltered[i];
            }
          }
          if (this.hideOkmInterlibraryLoans === true) {
            for (let i = 68; i < 85; i++) {
              delete okmfieldsfiltered[i];
            }
          }
          if (this.hideOkmDeleted === true) {
              delete okmfieldsfiltered[85];
          }
          if (this.hideOkmActiveBorrowers === true) {
              delete okmfieldsfiltered[86];
          }
          if (this.hideOkmCeliaBorrowers === true) {
              delete okmfieldsfiltered[87];
          }

          this.fields = okmfieldsfiltered;

          try {
            const response = await axios.get(
              `/api/v1/contrib/kohasuomi/reportstool/okmstats/reportsstats/`, { params: { okm_id: reportid } }
            );

            //console.log("Fetched okm report data:");
            //console.log(response.data);
            let stringified = JSON.stringify(response.data);
            stringified = stringified.replace(/\\/g, '');
            stringified = stringified.substring(3);
            stringified = stringified.slice(0, -3);
            //console.log("okm stringified:");
            //console.log(stringified);

            let jsonified = JSON.parse(stringified);

            this.myJson.data = jsonified;
          } catch (e) {
            //console.log(e);
            this.isBusy = false;
          }

          this.isBusy = false;
          //this.$nextTick(() => this.$refs.scrollhere.scrollIntoView({block: "end"}));
          this.$nextTick(() => this.$refs.scrollhere.scrollIntoView());
        }
      }
    })


  </script>
  </body>

  <script src="[% PLUGIN_PATH %]/json/okmstatsmoddedjson.js"></script>
  <script src="[% PLUGIN_PATH %]/fieldtemplates/okmfields.js"></script>
  <script src="[% PLUGIN_PATH %]/fieldtemplates/okmreportlistfields.js"></script>
  <script src="[% PLUGIN_PATH %]/fieldtemplates/removetoolfields.js"></script>
  <script src="[% PLUGIN_PATH %]/fieldtemplates/lainatfields.js"></script>
  <script src="[% PLUGIN_PATH %]/fieldtemplates/borrowersfields.js"></script>

  <script>
    fetch("[% PLUGIN_PATH %]/json/okmstatsmoddedjson.json")
      .then(response => response.json());
    // .then(jsonObject => console.log(jsonObject));

    function CopyToClipboard(containerid) {
      document.getElementById(containerid).click();
      if (document.selection) {
        var range = document.body.createTextRange();
        range.moveToElementText(document.getElementById(containerid));
        range.select().createTextRange();
        document.execCommand("copy");
      } else if (window.getSelection) {
        var range = document.createRange();
        range.selectNode(document.getElementById(containerid));
        window.getSelection().addRange(range);
        document.execCommand("copy");
        window.getSelection().removeAllRanges();// to deselect
        alert("Taulukko kopioitu leikepöydälle.")
      }
    }

    //for okm branch deletion
    function findIndexByProperty(array, name, value) {
      for (var i = 0; i < array.length; i++) {
        if (array[i][name] === value) { return i; }
      }
      return -1;
    }
  </script>
</html>